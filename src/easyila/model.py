from dataclasses import dataclass
from typing import List, Dict

import easyila.lynth.smt as smt

@dataclass
class Instruction:
    """
    Represents a sequence of state transitions. A transition is a mapping
    of state variables to expressions computing their next values.

    A single instruction is considered to be atomic.
    """
    transitions: List[Dict[smt.Variable, smt.Term]]

# models should look something like this?
@dataclass
class Model:
    inputs: List[smt.Variable]
    outputs: List[smt.Variable]
    state: List[smt.Variable]
    # memories: List[]
    submodules: Dict[str, "Module"] # how do we incorporate child-ILA transitions?
    """
    TODO

    should we be able to have multiple submodules of the same instance? this
    has a common use case for stuff like memories that are repeated

    how do we distinguish between having ILA instructions to execute vs.
    having transitions? for now, just have a default "NEXT" instruction
    """
    instructions: Dict[str, Instruction]

@dataclass
class ManualModel(Model):
    """
    An ILA model constructed by hand.
    """
    pass

class CaseSplitModel(Model):
    ...

@dataclass
class SyntaxGeneratedModel(Model):
    """
    A model generated by parsing a verilog file.

    State variables correspond to RTL registers, and transitions are
    automatically parsed.
    """
    def __init__(self, verilog_file):
        # TODO
        ...

@dataclass
class SynthesizedModel(Model):
    """
    A model with components generated by SyGuS.

    TODO figure out how to compose this
    """
    def __init__(self):
        ...
