"""
Generates configuration files for consumption by verilator.
"""

import time 
import os
# from shutil import copyfile
import sys

import pkg_resources

CONFIGFILE = "portconfig.h"
VERILATOR_CONFIGFILE = "verilator.config"
ROOT = "Tile"

MACROS = r'''
// Get the values of the variable varname
#ifndef VAR_STMT
#define VAR_STMT(varname) \
	file_ << "" #varname "\n"; \
	if (enter_) { \
		file_ << "nonsensical\n"; \
		file_ << "2\n"; \
	} \
	else { \
		sprintf(buf, "%u\n", (int) top_->varname); \
		file_ << std::string(buf); \
		file_ << "1\n"; \
	}
#endif // VAR_STMT

#ifndef CSV_FIRST_VAR_STMT
#define CSV_FIRST_VAR_STMT(varname) \
    sprintf(buf, "%u", (int) top_->varname); \
    file_ << std::string(buf);
#endif // CSV_FIRST_VAR_STMT

#ifndef CSV_VAR_STMT
#define CSV_VAR_STMT(varname) \
    sprintf(buf, ",%u", (int) top_->varname); \
    file_ << std::string(buf);
#endif // CSV_VAR_STMT

// Get the declarations for the .decls file
#ifndef DECL_STMT
#define DECL_STMT(varname) \
	file_ << "  variable " #varname "\n"; \
	file_ << "  var-kind variable\n"; \
	file_ << "  rep-type int\n"; \
	file_ << "  dec-type reg\n"; \
	file_ << "  comparability 1\n";
#endif // DECL_STMT

// Get decls for the csv style output
#ifndef CSV_FIRST_DECL_STMT
#define CSV_FIRST_DECL_STMT(varname, width) \
    decls_names_ << #varname ; \
    decls_width_ << #width ;
#endif // CSV_FIRST_DECL_STMT

#ifndef CSV_DECL_STMT
#define CSV_DECL_STMT(varname, width) \
	decls_names_ << "," #varname ; \
	decls_width_ << "," #width ;
#endif // CSV_DECL_STMT

'''

# // Get decls for the csv style output
# #ifndef CSV_DECL_STMT
# #define CSV_DECL_STMT(varname) \
#     file_ <<  "," #varname ;
# #endif // CSV_DECL_STMT



# Signal names that need to be monitored.
# Format: (
#   modulename,
#   signalname,
#   ["path", "to", "signal", "signalname"],
#   signalwidth,
#   start, end (inclusive range if array type)
# )

def generate_portconfig(signals, target_dir, root=ROOT):
    # Generate config file that monitors signals
    acc = "/* DO NOT EDIT: this file is autogenerated by gen_config.py at {} */\n".format(time.ctime(time.time()))
    modulenames = set([signal.module_name for signal in signals])
    for module in modulenames:
        acc += '#include "V{}_{}.h"\n'.format(root, module)
    acc += "\n"
    acc += MACROS
    acc += "#define ADD_DECLS_STMTS"
    for signal in signals:
        if signal.bounds:
            for index in range(signal.bounds[0], signal.bounds[1] + 1):
                acc += "\t\\\n\tDECL_STMT({})".format(signal.get_qualified_path() + f"[{index}]")
        else:
            acc += "\t\\\n\tDECL_STMT({})".format(signal.get_qualified_path())
    acc += "\n\n"
    acc += "#define ADD_DTRACE_STMTS"
    for signal in signals:
        if signal.bounds:
            for index in range(signal.bounds[0], signal.bounds[1] + 1):
                acc += "\t\\\n\tVAR_STMT({})".format(signal.get_qualified_path() + f"[{index}]")
        else:
            acc += "\t\\\n\tVAR_STMT({})".format(signal.get_qualified_path())
    acc += "\n\n"
    first = True
    acc += "#define CSV_ADD_DECLS_STMTS"
    for signal in signals:
        if signal.bounds:
            for index in range(signal.bounds[0], signal.bounds[1] + 1):
                macro = "CSV_FIRST_DECL_STMT" if first else "CSV_DECL_STMT"
                acc += "\t\\\n\t{}({}, {})".format(
                    macro,
                    signal.get_qualified_path() + f"[{index}]",
                    signal.width
                )
                first = False
        else:
            macro = "CSV_FIRST_DECL_STMT" if first else "CSV_DECL_STMT"
            acc += "\t\\\n\t{}({}, {})".format(macro, signal.get_qualified_path(), signal.width)
            first = False
    acc += "\n\n"
    acc += "#define CSV_ADD_DTRACE_STMTS"
    first = True
    for signal in signals:
        if signal.bounds:
            for index in range(signal.bounds[0], signal.bounds[1] + 1):
                macro = "CSV_FIRST_VAR_STMT" if first else "CSV_VAR_STMT"
                acc += "\t\\\n\t{}({})".format(macro, signal.get_qualified_path() + f"[{index}]")
                first = False
        else:
            macro = "CSV_FIRST_VAR_STMT" if first else "CSV_VAR_STMT"
            acc += "\t\\\n\t{}({})".format(macro, signal.get_qualified_path())
            first = False
    acc += "\n"
    with open(os.path.join(target_dir, CONFIGFILE), 'w') as fileh:
        fileh.write(acc)


def inject_tracingfiles(target_dir):
    if not pkg_resources.resource_isdir(__name__, "resources"):
        print("Missing resource directory")
        sys.exit(1)
    with pkg_resources.resource_stream(__name__, "resources/tracing_manager.h") as hfile:
        htext = "/* DO NOT EDIT: this file is autogenerated by gen_config.py at {} */\n".format(time.ctime(time.time()))
        htext += hfile.read().decode("utf-8")
        with open(os.path.join(target_dir, "tracing_manager.h"), 'w') as htgt:
            htgt.write(htext)
    with pkg_resources.resource_stream(__name__, "resources/tracing_manager.cc") as cfile:
        ctext = "/* DO NOT EDIT: this file is autogenerated by gen_config.py at {} */\n".format(time.ctime(time.time()))
        ctext += cfile.read().decode("utf-8")
        with open(os.path.join(target_dir, "tracing_manager.cc"), 'w') as ctgt:
            ctgt.write(ctext)
    print("Copied files!")
    # copyfile(os.path.join(TRACEDIR, "tracing_manager.h"), )
    # copyfile(os.path.join(TRACEDIR, "tracing_manager.cc"), os.path.join(target_dir, "tracing_manager.cc"))

def generate_verilatorconfig(signals, target_dir):
    acc = "// **DO NOT EDIT**: This file has been autogenerated by gen_config.py at {} \n".format(time.ctime(time.time()))
    acc += "`verilator_config\n"
    # Automatically add lift cycle counter
    for signal in signals:
        acc += 'public -module "' + signal.module_name + '" -var "' + signal.signal_name + '"\n'
    acc += "`verilog\n"
    with open(os.path.join(target_dir, VERILATOR_CONFIGFILE), 'w') as fileh:
        fileh.write(acc)

def generate_config(signals, target_sim_dir, target_verilog_dir, root):
    inject_tracingfiles(target_sim_dir)
    generate_portconfig(signals, target_sim_dir, root)
    generate_verilatorconfig(signals, target_verilog_dir)


# if __name__ == '__main__':
#     args = sys.argv[1:]
#     generate_portconfig(modulenames=MODULENAMES, varnames=VARNAMES)
#     generate_verilatorconfig(varnames=VARNAMES)
